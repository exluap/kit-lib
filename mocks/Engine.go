// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	bpm "github.com/exluap/kit/bpm"
	mock "github.com/stretchr/testify/mock"
)

// Engine is an autogenerated mock type for the Engine type
type Engine struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Engine) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeployBPMNsAsync provides a mock function with given fields: paths
func (_m *Engine) DeployBPMNsAsync(paths []string) {
	_m.Called(paths)
}

// IsOpened provides a mock function with given fields:
func (_m *Engine) IsOpened() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Open provides a mock function with given fields: params
func (_m *Engine) Open(params *bpm.Params) error {
	ret := _m.Called(params)

	var r0 error
	if rf, ok := ret.Get(0).(func(*bpm.Params) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterTaskHandlers provides a mock function with given fields: handlers
func (_m *Engine) RegisterTaskHandlers(handlers map[string]interface{}) error {
	ret := _m.Called(handlers)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = rf(handlers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendError provides a mock function with given fields: jobId, errCode, errMessage
func (_m *Engine) SendError(jobId int64, errCode string, errMessage string) error {
	ret := _m.Called(jobId, errCode, errMessage)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string, string) error); ok {
		r0 = rf(jobId, errCode, errMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessage provides a mock function with given fields: messageId, correlationId, vars
func (_m *Engine) SendMessage(messageId string, correlationId string, vars map[string]interface{}) error {
	ret := _m.Called(messageId, correlationId, vars)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}) error); ok {
		r0 = rf(messageId, correlationId, vars)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartProcess provides a mock function with given fields: processId, vars
func (_m *Engine) StartProcess(processId string, vars map[string]interface{}) (string, error) {
	ret := _m.Called(processId, vars)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) string); ok {
		r0 = rf(processId, vars)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = rf(processId, vars)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
