// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	google_golang_orggrpc "google.golang.org/grpc"

	grpc "github.com/exluap/kit/grpc"

	mock "github.com/stretchr/testify/mock"
)

// TestServiceClient is an autogenerated mock type for the TestServiceClient type
type TestServiceClient struct {
	mock.Mock
}

// WithError provides a mock function with given fields: ctx, in, opts
func (_m *TestServiceClient) WithError(ctx context.Context, in *grpc.WithErrorRequest, opts ...google_golang_orggrpc.CallOption) (*grpc.WithErrorResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.WithErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.WithErrorRequest, ...google_golang_orggrpc.CallOption) *grpc.WithErrorResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.WithErrorResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.WithErrorRequest, ...google_golang_orggrpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithPanic provides a mock function with given fields: ctx, in, opts
func (_m *TestServiceClient) WithPanic(ctx context.Context, in *grpc.WithPanicRequest, opts ...google_golang_orggrpc.CallOption) (*grpc.WithPanicResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.WithPanicResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.WithPanicRequest, ...google_golang_orggrpc.CallOption) *grpc.WithPanicResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.WithPanicResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.WithPanicRequest, ...google_golang_orggrpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
